<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context" xmlns:cache="http://www.springframework.org/schema/cache"
        xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/cache 
           http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
	default-lazy-init="false">
	
  <context:component-scan base-package="cn.slimsmart.memcache.demo.test.spring" />
   <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->  
  <cache:annotation-driven cache-manager="cacheManager"/>
  <!-- 
 	 一个到期时间在缓存中的所有元素可能不足，当一个高速缓存存储的对象不同的域类型。
 	 在这种情况下，最好的解决办法是定义过期每注解，但是spring3.1缓存不支持开箱即用。
 	  ExtendedSSMCacheManager克服了这一限制，并允许通过后的期满时间，作为高速缓存的名称的一部分。
 	  要在方法定义自定义到期的特定缓存名称的缓存名称串联使用，分隔符（默认为＃）和到期
   -->
   <!-- spring自己的换管理器，这里定义了两个缓存位置名称 ，既注解中的value -->  
  <bean name="cacheManager" class="com.google.code.ssm.spring.ExtendedSSMCacheManager">
    <property name="caches">
      <set>
        <bean class="com.google.code.ssm.spring.SSMCache">
          <constructor-arg name="cache" index="0" ref="defaultCache" />
          <!-- 默认 5 minutes -->
          <constructor-arg name="expiration" index="1" value="300" />
          <!-- @CacheEvict(..., "allEntries" = true) won't work because allowClear is false, 
          so we won't flush accidentally all entries from memcached instance -->
          <constructor-arg name="allowClear" index="2" value="false" />
        </bean>
      </set>
    </property>
  </bean>

  <bean name="defaultCache" class="com.google.code.ssm.CacheFactory">
  	<!--  定义缓存名称 -->
    <property name="cacheName" value="studentCache" />
    <property name="cacheClientFactory">
      <bean name="cacheClientFactory" class="com.google.code.ssm.providers.xmemcached.MemcacheClientFactoryImpl" />
    </property>
    <property name="addressProvider">
      <bean class="com.google.code.ssm.config.DefaultAddressProvider">
        <property name="address" value="192.168.100.110:11211,192.168.100.110:11311,192.168.100.110:11411" />
      </bean>
    </property>
    <property name="configuration">
      <bean class="com.google.code.ssm.providers.CacheConfiguration">
        <property name="consistentHashing" value="true" />
      </bean>
    </property>
    <property name="defaultSerializationType"
                  value="#{T(com.google.code.ssm.api.format.SerializationType).valueOf(@defaultSerializationTypeAsString)}" />
  </bean>
   <!-- easy way to test different types of serialization mechanizm by passing it as system property (-Dssm.provider=JSON) -->
    <bean id="defaultSerializationTypeAsString" class="java.lang.String">
        <constructor-arg value="#{systemProperties['ssm.defaultSerializationType']?:'JSON'}" />
    </bean>
</beans>