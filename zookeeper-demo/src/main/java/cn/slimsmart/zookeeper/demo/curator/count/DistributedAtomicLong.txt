再看一个Long类型的计数器。 除了计数的范围比SharedCount大了之外， 它首先尝试使用乐观锁的方式设置计数器，
如果不成功(比如期间计数器已经被其它client更新了)， 它使用InterProcessMutex方式来更新计数值。 还记得InterProcessMutex是什么吗？
 它是我们前面跟着实例学习ZooKeeper的用法： 分布式锁 讲的分布式可重入锁。 这和上面的计数器的实现有显著的不同。

可以从它的内部实现DistributedAtomicValue.trySet中看出端倪。

AtomicValue<byte[]>   trySet(MakeValue makeValue) throws Exception
{
    MutableAtomicValue<byte[]>  result = new MutableAtomicValue<byte[]>(null, null, false);
    tryOptimistic(result, makeValue);
    if ( !result.succeeded() && (mutex != null) )
    {
        tryWithMutex(result, makeValue);
    }
    return result;
}
此计数器有一系列的操作：

get(): 获取当前值
increment()： 加一
decrement(): 减一
add()： 增加特定的值
subtract(): 减去特定的值
trySet(): 尝试设置计数值
forceSet(): 强制设置计数值
你必须检查返回结果的succeeded()， 它代表此操作是否成功。 如果操作成功， preValue()代表操作前的值， postValue()代表操作后的值。